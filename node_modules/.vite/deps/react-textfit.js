import {
  require_prop_types
} from "./chunk-YMGJR4LM.js";
import {
  __commonJS,
  require_react
} from "./chunk-QI53LHDY.js";

// node_modules/react-textfit/lib/utils/shallowEqual.js
var require_shallowEqual = __commonJS({
  "node_modules/react-textfit/lib/utils/shallowEqual.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = shallowEqual;
    function shallowEqual(objA, objB) {
      if (objA === objB) {
        return true;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      var hasOwn = Object.prototype.hasOwnProperty;
      for (var i = 0; i < keysA.length; i++) {
        if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
          return false;
        }
      }
      return true;
    }
  }
});

// node_modules/process/browser.js
var require_browser = __commonJS({
  "node_modules/process/browser.js"(exports, module) {
    var process = module.exports = {};
    var cachedSetTimeout;
    var cachedClearTimeout;
    function defaultSetTimout() {
      throw new Error("setTimeout has not been defined");
    }
    function defaultClearTimeout() {
      throw new Error("clearTimeout has not been defined");
    }
    (function() {
      try {
        if (typeof setTimeout === "function") {
          cachedSetTimeout = setTimeout;
        } else {
          cachedSetTimeout = defaultSetTimout;
        }
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }
      try {
        if (typeof clearTimeout === "function") {
          cachedClearTimeout = clearTimeout;
        } else {
          cachedClearTimeout = defaultClearTimeout;
        }
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    })();
    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        return setTimeout(fun, 0);
      }
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }
      try {
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e2) {
          return cachedSetTimeout.call(this, fun, 0);
        }
      }
    }
    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        return clearTimeout(marker);
      }
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }
      try {
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          return cachedClearTimeout.call(null, marker);
        } catch (e2) {
          return cachedClearTimeout.call(this, marker);
        }
      }
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return;
      }
      draining = false;
      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }
      if (queue.length) {
        drainQueue();
      }
    }
    function drainQueue() {
      if (draining) {
        return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
      var len = queue.length;
      while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }
        queueIndex = -1;
        len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }
    process.nextTick = function(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
    };
    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }
    Item.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    process.title = "browser";
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = "";
    process.versions = {};
    function noop() {
    }
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;
    process.listeners = function(name) {
      return [];
    };
    process.binding = function(name) {
      throw new Error("process.binding is not supported");
    };
    process.cwd = function() {
      return "/";
    };
    process.chdir = function(dir) {
      throw new Error("process.chdir is not supported");
    };
    process.umask = function() {
      return 0;
    };
  }
});

// node_modules/react-textfit/lib/utils/series.js
var require_series = __commonJS({
  "node_modules/react-textfit/lib/utils/series.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = series;
    var _process = require_browser();
    var _process2 = _interopRequireDefault(_process);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function series(tasks, cb) {
      var results = [];
      var current = 0;
      var isSync = true;
      function done(err) {
        function end() {
          if (cb)
            cb(err, results);
        }
        if (isSync)
          _process2.default.nextTick(end);
        else
          end();
      }
      function each(err, result) {
        results.push(result);
        if (++current >= tasks.length || err)
          done(err);
        else
          tasks[current](each);
      }
      if (tasks.length > 0)
        tasks[0](each);
      else
        done(null);
      isSync = false;
    }
  }
});

// node_modules/react-textfit/lib/utils/whilst.js
var require_whilst = __commonJS({
  "node_modules/react-textfit/lib/utils/whilst.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = whilst;
    var noop = function noop2() {
    };
    function whilst(test, iterator) {
      var callback = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : noop;
      if (test()) {
        iterator(function next(err) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          if (err) {
            callback(err);
          } else if (test.apply(this, args)) {
            iterator(next);
          } else {
            callback(null);
          }
        });
      } else {
        callback(null);
      }
    }
  }
});

// node_modules/react-textfit/lib/utils/throttle.js
var require_throttle = __commonJS({
  "node_modules/react-textfit/lib/utils/throttle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = throttle;
    function throttle(func, wait) {
      var ctx = void 0;
      var args = void 0;
      var rtn = void 0;
      var timeoutID = void 0;
      var last = 0;
      function call() {
        timeoutID = 0;
        last = +/* @__PURE__ */ new Date();
        rtn = func.apply(ctx, args);
        ctx = null;
        args = null;
      }
      return function throttled() {
        ctx = this;
        args = arguments;
        var delta = /* @__PURE__ */ new Date() - last;
        if (!timeoutID) {
          if (delta >= wait)
            call();
          else
            timeoutID = setTimeout(call, wait - delta);
        }
        return rtn;
      };
    }
  }
});

// node_modules/react-textfit/lib/utils/uniqueId.js
var require_uniqueId = __commonJS({
  "node_modules/react-textfit/lib/utils/uniqueId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = uniqueId;
    var uid = 0;
    function uniqueId() {
      return uid++;
    }
  }
});

// node_modules/react-textfit/lib/utils/innerSize.js
var require_innerSize = __commonJS({
  "node_modules/react-textfit/lib/utils/innerSize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.innerHeight = innerHeight;
    exports.innerWidth = innerWidth;
    function innerHeight(el) {
      var style = window.getComputedStyle(el, null);
      if (!style)
        return el.clientHeight;
      return el.clientHeight - parseInt(style.getPropertyValue("padding-top"), 10) - parseInt(style.getPropertyValue("padding-bottom"), 10);
    }
    function innerWidth(el) {
      var style = window.getComputedStyle(el, null);
      if (!style)
        return el.clientWidth;
      return el.clientWidth - parseInt(style.getPropertyValue("padding-left"), 10) - parseInt(style.getPropertyValue("padding-right"), 10);
    }
  }
});

// node_modules/react-textfit/lib/Textfit.js
var require_Textfit = __commonJS({
  "node_modules/react-textfit/lib/Textfit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = /* @__PURE__ */ function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _shallowEqual = require_shallowEqual();
    var _shallowEqual2 = _interopRequireDefault(_shallowEqual);
    var _series = require_series();
    var _series2 = _interopRequireDefault(_series);
    var _whilst = require_whilst();
    var _whilst2 = _interopRequireDefault(_whilst);
    var _throttle = require_throttle();
    var _throttle2 = _interopRequireDefault(_throttle);
    var _uniqueId = require_uniqueId();
    var _uniqueId2 = _interopRequireDefault(_uniqueId);
    var _innerSize = require_innerSize();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(obj, keys) {
      var target = {};
      for (var i in obj) {
        if (keys.indexOf(i) >= 0)
          continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i))
          continue;
        target[i] = obj[i];
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    function assertElementFitsWidth(el, width) {
      return el.scrollWidth - 1 <= width;
    }
    function assertElementFitsHeight(el, height) {
      return el.scrollHeight - 1 <= height;
    }
    function noop() {
    }
    var TextFit = function(_React$Component) {
      _inherits(TextFit2, _React$Component);
      function TextFit2(props) {
        _classCallCheck(this, TextFit2);
        var _this = _possibleConstructorReturn(this, (TextFit2.__proto__ || Object.getPrototypeOf(TextFit2)).call(this, props));
        _this.state = {
          fontSize: null,
          ready: false
        };
        _this.handleWindowResize = function() {
          _this.process();
        };
        if ("perfectFit" in props) {
          console.warn("TextFit property perfectFit has been removed.");
        }
        _this.handleWindowResize = (0, _throttle2.default)(_this.handleWindowResize, props.throttle);
        return _this;
      }
      _createClass(TextFit2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var autoResize = this.props.autoResize;
          if (autoResize) {
            window.addEventListener("resize", this.handleWindowResize);
          }
          this.process();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var ready = this.state.ready;
          if (!ready)
            return;
          if ((0, _shallowEqual2.default)(this.props, prevProps))
            return;
          this.process();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          var autoResize = this.props.autoResize;
          if (autoResize) {
            window.removeEventListener("resize", this.handleWindowResize);
          }
          this.pid = (0, _uniqueId2.default)();
        }
      }, {
        key: "process",
        value: function process() {
          var _this2 = this;
          var _props = this.props, min = _props.min, max = _props.max, mode = _props.mode, forceSingleModeWidth = _props.forceSingleModeWidth, onReady = _props.onReady;
          var el = this._parent;
          var wrapper = this._child;
          var originalWidth = (0, _innerSize.innerWidth)(el);
          var originalHeight = (0, _innerSize.innerHeight)(el);
          if (originalHeight <= 0 || isNaN(originalHeight)) {
            console.warn("Can not process element without height. Make sure the element is displayed and has a static height.");
            return;
          }
          if (originalWidth <= 0 || isNaN(originalWidth)) {
            console.warn("Can not process element without width. Make sure the element is displayed and has a static width.");
            return;
          }
          var pid = (0, _uniqueId2.default)();
          this.pid = pid;
          var shouldCancelProcess = function shouldCancelProcess2() {
            return pid !== _this2.pid;
          };
          var testPrimary = mode === "multi" ? function() {
            return assertElementFitsHeight(wrapper, originalHeight);
          } : function() {
            return assertElementFitsWidth(wrapper, originalWidth);
          };
          var testSecondary = mode === "multi" ? function() {
            return assertElementFitsWidth(wrapper, originalWidth);
          } : function() {
            return assertElementFitsHeight(wrapper, originalHeight);
          };
          var mid = void 0;
          var low = min;
          var high = max;
          this.setState({ ready: false });
          (0, _series2.default)([
            // Step 1:
            // Binary search to fit the element's height (multi line) / width (single line)
            function(stepCallback) {
              return (0, _whilst2.default)(function() {
                return low <= high;
              }, function(whilstCallback) {
                if (shouldCancelProcess())
                  return whilstCallback(true);
                mid = parseInt((low + high) / 2, 10);
                _this2.setState({ fontSize: mid }, function() {
                  if (shouldCancelProcess())
                    return whilstCallback(true);
                  if (testPrimary())
                    low = mid + 1;
                  else
                    high = mid - 1;
                  return whilstCallback();
                });
              }, stepCallback);
            },
            // Step 2:
            // Binary search to fit the element's width (multi line) / height (single line)
            // If mode is single and forceSingleModeWidth is true, skip this step
            // in order to not fit the elements height and decrease the width
            function(stepCallback) {
              if (mode === "single" && forceSingleModeWidth)
                return stepCallback();
              if (testSecondary())
                return stepCallback();
              low = min;
              high = mid;
              return (0, _whilst2.default)(function() {
                return low < high;
              }, function(whilstCallback) {
                if (shouldCancelProcess())
                  return whilstCallback(true);
                mid = parseInt((low + high) / 2, 10);
                _this2.setState({ fontSize: mid }, function() {
                  if (pid !== _this2.pid)
                    return whilstCallback(true);
                  if (testSecondary())
                    low = mid + 1;
                  else
                    high = mid - 1;
                  return whilstCallback();
                });
              }, stepCallback);
            },
            // Step 3
            // Limits
            function(stepCallback) {
              mid = Math.min(low, high);
              mid = Math.max(mid, min);
              mid = Math.min(mid, max);
              mid = Math.max(mid, 0);
              if (shouldCancelProcess())
                return stepCallback(true);
              _this2.setState({ fontSize: mid }, stepCallback);
            }
          ], function(err) {
            if (err || shouldCancelProcess())
              return;
            _this2.setState({ ready: true }, function() {
              return onReady(mid);
            });
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this3 = this;
          var _props2 = this.props, children = _props2.children, text = _props2.text, style = _props2.style, min = _props2.min, max = _props2.max, mode = _props2.mode, forceWidth = _props2.forceWidth, forceSingleModeWidth = _props2.forceSingleModeWidth, throttle = _props2.throttle, autoResize = _props2.autoResize, onReady = _props2.onReady, props = _objectWithoutProperties(_props2, ["children", "text", "style", "min", "max", "mode", "forceWidth", "forceSingleModeWidth", "throttle", "autoResize", "onReady"]);
          var _state = this.state, fontSize = _state.fontSize, ready = _state.ready;
          var finalStyle = _extends({}, style, {
            fontSize
          });
          var wrapperStyle = {
            display: ready ? "block" : "inline-block"
          };
          if (mode === "single")
            wrapperStyle.whiteSpace = "nowrap";
          return _react2.default.createElement(
            "div",
            _extends({ ref: function ref(c) {
              return _this3._parent = c;
            }, style: finalStyle }, props),
            _react2.default.createElement(
              "div",
              { ref: function ref(c) {
                return _this3._child = c;
              }, style: wrapperStyle },
              text && typeof children === "function" ? ready ? children(text) : text : children
            )
          );
        }
      }]);
      return TextFit2;
    }(_react2.default.Component);
    TextFit.propTypes = {
      children: _propTypes2.default.node,
      text: _propTypes2.default.string,
      min: _propTypes2.default.number,
      max: _propTypes2.default.number,
      mode: _propTypes2.default.oneOf(["single", "multi"]),
      forceSingleModeWidth: _propTypes2.default.bool,
      throttle: _propTypes2.default.number,
      onReady: _propTypes2.default.func
    };
    TextFit.defaultProps = {
      min: 1,
      max: 100,
      mode: "multi",
      forceSingleModeWidth: true,
      throttle: 50,
      autoResize: true,
      onReady: noop
    };
    exports.default = TextFit;
  }
});

// node_modules/react-textfit/lib/index.js
var require_lib = __commonJS({
  "node_modules/react-textfit/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Textfit = void 0;
    var _Textfit = require_Textfit();
    var _Textfit2 = _interopRequireDefault(_Textfit);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.Textfit = _Textfit2.default;
    exports.default = _Textfit2.default;
  }
});
export default require_lib();
//# sourceMappingURL=react-textfit.js.map
